{"version":3,"file":"functions.js","mappings":"yBAsGAA,gBAAgBC,UAAU,OA7FnB,SAAaC,EAAeC,GACjC,OAAOD,EAAQC,CACjB,IA4FAH,gBAAgBC,UAAU,SArFnB,SAAeG,GACpB,IAAMC,EAAQC,aAAY,WACxB,IAAMC,GAcD,IAAIC,MAAOC,qBAbhBL,EAAWM,UAAUH,EACvB,GAAG,KAEHH,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IA6EAL,gBAAgBC,UAAU,aA7DnB,SACLY,EACAT,GAEA,IAAIU,EAAS,EACPT,EAAQC,aAAY,WACxBQ,GAAUD,EACVT,EAAWM,UAAUI,EACvB,GAAG,KAEHV,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IAiDAL,gBAAgBC,UAAU,OAzCnB,SAAoBc,GAGzB,OAFAC,QAAQC,IAAIF,GAELA,CACT,IAsCAf,gBAAgBC,UAAU,gBAvBnB,SAAsBiB,GAAkC,IAAAC,EAAAC,EAAAC,EAC7D,IAAKC,OAAOC,SAASL,IAAMA,EAAI,EAAG,MAAM,IAAIM,MAAM,gCAClD,GAAIN,EAAI,IAAK,MAAM,IAAIM,MAAM,4BAW7B,IATA,IAEMC,EAA2B,YADiB,QAAhDN,EAAwB,QAAxBC,EAACM,WAAWC,oBAAY,IAAAP,OAAA,EAAvBA,EAAyBQ,QAAQ,sBAAc,IAAAT,EAAAA,EAAI,OAAOU,cAIvDC,EAAM,sBAENC,EAAkC,QAAnBV,EAAIK,WAAWI,UAAI,IAAAT,EAAAA,EAAfK,WAAWI,GAAS,CAAC,GAAI,IAEzCE,EAAID,EAAME,OAAQD,GAAKd,EAAGc,IAAKD,EAAMC,GAAKD,EAAMC,EAAI,GAAKE,OAAOF,GAEzE,IAAMG,EAAQJ,EAAMI,MAAM,EAAGjB,EAAI,GAAGkB,KAAI,SAACC,GAAC,OAAKA,EAAEC,UAAU,IAC3D,OAAOb,EAAWU,EAAMC,KAAI,SAACC,GAAC,MAAK,CAACA,EAAE,IAAIF,CAC5C,G","sources":["webpack://excel-custom-functions/./src/functions/functions.ts"],"sourcesContent":["/* global clearInterval, console, CustomFunctions, setInterval */\n\n/**\n * Adds two numbers.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\nexport function add(first: number, second: number): number {\n  return first + second;\n}\n\n/**\n * Displays the current time once a second.\n * @customfunction\n * @param invocation Custom function handler\n */\nexport function clock(invocation: CustomFunctions.StreamingInvocation<string>): void {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time.\n * @returns String with the current time formatted for the current locale.\n */\nexport function currentTime(): string {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param incrementBy Amount to increment\n * @param invocation Custom function handler\n */\nexport function increment(\n  incrementBy: number,\n  invocation: CustomFunctions.StreamingInvocation<number>\n): void {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param message String to write.\n * @returns String to write.\n */\nexport function logMessage(message: string): string {\n  console.log(message);\n\n  return message;\n}\n\n\n/* -----------------------------------------------------------------------\n   NEW  –  TESTVELIXO.FACTORIALROW\n------------------------------------------------------------------------ */\n\n/**\n * FACTORIALROW(N) → spill of 1! … N!\n * Row/column orientation is read from localStorage (\"row\" | \"column\").\n * Results are cached and returned as strings to preserve precision.\n *\n * @customfunction FACTORIALROW\n * @param n Largest integer (1 – 500)\n */\nexport function factorialRow(n: number): string[] | string[][] {\n  if (!Number.isFinite(n) || n < 1) throw new Error(\"N must be a positive integer\");\n  if (n > 500) throw new Error(\"N too large – max is 500\");\n\n  const orientation =\n    (globalThis.localStorage?.getItem(\"orientation\") ?? \"row\").toLowerCase();\n  const vertical = orientation === \"column\";\n\n  // ---- session-wide factorial cache (shared runtime) -------------------\n  const key = \"__factorial_cache__\";\n  // @ts-ignore\n  const cache: bigint[] = (globalThis[key] ??= [0n, 1n]); // seed 0!,1!\n\n  for (let i = cache.length; i <= n; i++) cache[i] = cache[i - 1] * BigInt(i);\n\n  const slice = cache.slice(1, n + 1).map((v) => v.toString());\n  return vertical ? slice.map((v) => [v]) : slice;\n}\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"FACTORIALROW\", factorialRow);"],"names":["CustomFunctions","associate","first","second","invocation","timer","setInterval","time","Date","toLocaleTimeString","setResult","onCanceled","clearInterval","incrementBy","result","message","console","log","n","_globalThis$localStor","_globalThis$localStor2","_globalThis$key","Number","isFinite","Error","vertical","globalThis","localStorage","getItem","toLowerCase","key","cache","i","length","BigInt","slice","map","v","toString"],"sourceRoot":""}